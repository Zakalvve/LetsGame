@page "/test"

@inject NavigationManager nav
@inject UserManager<ApplicationUser> userManager
@inject SignInManager<ApplicationUser> signInManager
@inject IIdentityServerInteractionService interaction
@inject IClientStore clientStore
@inject IAuthenticationSchemeProvider schemeProvider
@inject IAuthenticationHandlerProvider handlerProvider
@inject IEventService events
@inject IRedirectService redirector

<MudContainer>
    @if (showAlert) {
        if (success) {
            <MudAlert Severity="Severity.Success">Form successfully posted!</MudAlert>
        } else
        {
            <MudAlert Severity="Severity.Error">Something went wrong!</MudAlert>
        }
    }

    <EditForm FormName="login-form" Model="@model" OnValidSubmit="UserLogin">
        <MudTextField Name="Input.Username" Label="Username" HelperText="Your username" Placeholder="Enter your username"
                        @bind-Value="model.Username" For="@(() => model.Username)"/>
        <MudTextField Name="Input.Password" Label="Password" HelperText="Choose a strong password" Class="mt-3" Placeholder="Enter your password"
                        @bind-Value="model.Password" For="@(() => model.Password)"/>

        <MudText Class="mt-4" Typo="Typo.body2">Use the development login. Username: bob, Password: Pass123$</MudText>

        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Login</MudButton>
    </EditForm>
</MudContainer>

@code {

    [SupplyParameterFromQuery]
    private string? returnUrl { get; set; }

    [SupplyParameterFromForm]
    private LoginInputModel model { get; set; } = new();

    bool showAlert = false;
    bool success = false;

    protected override async Task OnInitializedAsync()
    {
        //just wait
        await Task.Delay(300);

        if (String.IsNullOrWhiteSpace(returnUrl))
        {
            returnUrl = "%2Fconnect%2Fauthorize%2Fcallback%3Fclient_id%3Dwebapp%26redirect_uri%3Dhttps%253A%252F%252Flocalhost%253A7188%252Fsignin-oidc%26response_type%3Dcode%26scope%3Dopenid%2520profile%2520core-api%26code_challenge%3D42xWcO3J6C9VHFsejT8H6J6M2Zkq5xnE1za73cGoaOk%26code_challenge_method%3DS256%26response_mode%3Dform_post%26nonce%3D638388868809187912.YTUzN2UxMDMtOTQ2Mi00ODNhLWJmOWEtNjMxY2ExNzNjYjliYTZkYmVkY2UtZDEwMS00ODM3LTkzMWMtZDEzY2E2MDQxYjcx%26state%3DCfDJ8HEuPZo8hC1NjU6vRJir-D9OqCYdanIUM_o_gLzeE_ucFjd2K2MU_6WLkaCkZg6sDJ0ISEGQIK5mnBPixL3LJLxXawoNFKFbmyQu4DveWGDOJ1RvZ9xcaZIUkpTIIsDqvVPG9aEtP3Hn_EPgBa1W39x94JeJNnF6aHqwTzQFuvowNxBl2aKRK4Z5PxVkWnZTeWtddebWKJw0rwFpmj1v7mN2SvnDYo_XMY6AHmbwIlIVVJYkCqm_6sg5ADcflSh2cjhS-wR-K-vBWUcVb6zxFcPvlw9Y9uh_bc4tWAIgfjX78oh9MIykif3Jbxnl40_WG4QhZKUDFKfjCb02xnhI1qeqwHlhlCrNEFOJw4ctJlLbtzY9nJLqUjKQAogOofGo7g%26x-client-SKU%3DID_NET8_0%26x-client-ver%3D7.0.3.0";
        }

        var vm = await BuildLoginViewModelAsync(returnUrl);

    }

    private async Task UserLogin()
    {
        // check if we are in the context of an authorization request
        var context = await interaction.GetAuthorizationContextAsync(returnUrl);

        var result = await signInManager.PasswordSignInAsync(model.Username, model.Password, model.RememberLogin, lockoutOnFailure: true);

        if (result.Succeeded)
        {
            var user = await userManager.FindByNameAsync(model.Username);
            await events.RaiseAsync(new UserLoginSuccessEvent(user.UserName, user.Id, user.UserName, clientId: context?.Client.ClientId));

            if (String.IsNullOrEmpty(returnUrl))
            {
                //nav.NavigateTo("~/");
            }

            //nav.NavigateTo(redirector.ExtractRedirectUriFromReturnUrl(returnUrl!));
            ShowLoginAlert(true);
        }

        await events.RaiseAsync(new UserLoginFailureEvent(model.Username, "invalid credentials", clientId: context?.Client.ClientId));
        ShowLoginAlert(false);
    }

    private async Task ShowLoginAlert(bool s)
    {
        success = s;
        showAlert = true;
        await Task.Delay(3000);

        showAlert = false;
        StateHasChanged();
    }

    private async Task<LoginViewModel> BuildLoginViewModelAsync(LoginInputModel model, string returnUrl)
    {
        var vm = await BuildLoginViewModelAsync(returnUrl);
        vm.Username = model.Username;
        vm.RememberLogin = model.RememberLogin;

        return vm;
    }

    private async Task<LoginViewModel> BuildLoginViewModelAsync(string returnUrl)
    {
        var context = await interaction.GetAuthorizationContextAsync(returnUrl);
        if (context?.IdP != null && await schemeProvider.GetSchemeAsync(context.IdP) != null)
        {
            var local = context.IdP == IdentityServerConstants.LocalIdentityProvider;

            var vm = new LoginViewModel
            {
                EnableLocalLogin = local,
                Username = context?.LoginHint
            };

            if (!local)
            {
                vm.ExternalProviders = new[] { new ExternalProvider { AuthenticationScheme = context.IdP } };
            }

            return vm;
        }

        var schemes = await schemeProvider.GetAllSchemesAsync();

        var providers = schemes
        .Where(scheme => scheme.DisplayName != null)
        .Select(scheme => new ExternalProvider
        {
            DisplayName = scheme.DisplayName ?? scheme.Name,
            AuthenticationScheme = scheme.Name
        }).ToList();

        var allowLocal = true;
        if (context?.Client.ClientId != null)
        {
            var client = await clientStore.FindEnabledClientByIdAsync(context.Client.ClientId);
            if (client != null)
            {
                allowLocal = client.EnableLocalLogin;
                if (client.IdentityProviderRestrictions != null && client.IdentityProviderRestrictions.Any())
                {
                    providers = providers.Where(provider => client.IdentityProviderRestrictions.Contains(provider.AuthenticationScheme)).ToList();
                }
            }
        }

        return new LoginViewModel
        {
            AllowRememberLogin = AccountOptions.AllowRememberLogin,
            EnableLocalLogin = allowLocal && AccountOptions.AllowLocalLogin,
            Username = context?.LoginHint,
            ExternalProviders = providers.ToArray()
        };
    }
}
